# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type User {
  id: ID!

  """@Validator.@IsEmail()"""
  email: String!
  name: String!
}

type LoginResponse {
  access_token: String!
  user: User!
}

type Item {
  id: ID!
  name: String!
  imageUrl: String!
  startDate: DateTime
  endDate: DateTime
  basePrice: String
  status: Status!
  category: Category!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

enum Status {
  LIVE
  UPCOMING
  IC
  ENDED
}

enum Category {
  KEYCAPS
  KEYBOARDS
  SWITCHES
}

type Query {
  user(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput!], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum!]): User!
  item(where: ItemWhereInput, orderBy: [ItemOrderByWithRelationInput!], cursor: ItemWhereUniqueInput, take: Int, skip: Int, distinct: [ItemScalarFieldEnum!]): Item!
  items: [Item!]!
  findById(id: String!): Item!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IntFilter
  email: StringFilter
  name: StringFilter
  password: StringFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntFilter
}

input NestedIntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input UserOrderByWithRelationInput {
  id: SortOrder
  email: SortOrder
  name: SortOrder
  password: SortOrder
}

enum SortOrder {
  asc
  desc
}

input UserWhereUniqueInput {
  id: Int
  email: String
}

enum UserScalarFieldEnum {
  id
  email
  name
  password
  createdAt
  updatedAt
}

input ItemWhereInput {
  AND: [ItemWhereInput!]
  OR: [ItemWhereInput!]
  NOT: [ItemWhereInput!]
  id: StringFilter
  name: StringFilter
  imageUrl: StringFilter
  startDate: DateTimeNullableFilter
  endDate: DateTimeNullableFilter
  basePrice: StringNullableFilter
  status: EnumStatusFilter
  category: EnumCategoryFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeNullableFilter
}

input NestedDateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeNullableFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input EnumStatusFilter {
  equals: Status
  in: [Status!]
  notIn: [Status!]
  not: NestedEnumStatusFilter
}

input NestedEnumStatusFilter {
  equals: Status
  in: [Status!]
  notIn: [Status!]
  not: NestedEnumStatusFilter
}

input EnumCategoryFilter {
  equals: Category
  in: [Category!]
  notIn: [Category!]
  not: NestedEnumCategoryFilter
}

input NestedEnumCategoryFilter {
  equals: Category
  in: [Category!]
  notIn: [Category!]
  not: NestedEnumCategoryFilter
}

input ItemOrderByWithRelationInput {
  id: SortOrder
  name: SortOrder
  imageUrl: SortOrder
  startDate: SortOrder
  endDate: SortOrder
  basePrice: SortOrder
  status: SortOrder
  category: SortOrder
}

input ItemWhereUniqueInput {
  id: String
  name: String
}

enum ItemScalarFieldEnum {
  id
  name
  imageUrl
  startDate
  endDate
  basePrice
  status
  category
  createdAt
  updatedAt
}

type Mutation {
  createUser(data: UserCreateInput!): User!
  login(loginUserInput: LoginUserInput!): LoginResponse!
  createItem(data: ItemCreateInput!): Item!
}

input UserCreateInput {
  email: String!
  name: String!
  password: String!
}

input LoginUserInput {
  email: String!
  password: String!
}

input ItemCreateInput {
  id: String
  name: String!
  imageUrl: String!
  startDate: DateTime
  endDate: DateTime
  basePrice: String
  status: Status
  category: Category!
}
